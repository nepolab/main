#!/bin/bash
### BEGIN INIT INFO
# Provides:          rc.firewall
# Required-Start:    $local_fs $remote_fs $syslog $all
# Required-Stop:
# Default-Start:     
# Default-Stop:      
# Short-Description: Run /etc/init.d/rc.firewall
### END INIT INFO
 
# Simple firewalling router
# author: vvitkov
# contact: http://www.getoto.net/az/
#
# Licence: CC NC-BY-SA v3
# Disclaimer: i take no responsibility for the consequences of using or not using this.
# It is up to you to decide what to do with this stuff.
# Please if you use this write me a note and don't remove the author info.
 
#######
# Settings, vars
#######
echo "Setting Up Variables ..."
IPT="/sbin/iptables"
if [ -x /sbin/sysctl ] ; then
    SYSCTL="/sbin/sysctl -w"
fi
 
# define external interface, ip, mask, broadcast
EXT_IF="eth1"
EXT_IP="$(/sbin/ifconfig $EXT_IF | grep "addr:" | cut -d":" -f2 | cut -f1 -d" ")"
EXT_NM="$(/sbin/ifconfig $EXT_IF | grep "addr:" | cut -d":" -f4 | cut -f1 -d" ")"
EXT_BC="$(/sbin/ifconfig $EXT_IF | grep "addr:" | cut -d":" -f3 | cut -f1 -d" ")"
 
# define internal interface, ip, mask, broadcast
INT_IF="eth2"
INT_IP="$(/sbin/ifconfig $INT_IF | grep "addr:" | cut -d":" -f2 | cut -f1 -d" ")"
INT_NM="$(/sbin/ifconfig $INT_IF | grep "addr:" | cut -d":" -f4 | cut -f1 -d" ")"
INT_BC="$(/sbin/ifconfig $INT_IF | grep "addr:" | cut -d":" -f3 | cut -f1 -d" ")"
INT_NET="$INT_IP/24"
#INT_NET="$INT_IP"/"$INT_NM"
 
# define the loopback
LO_IF="lo"
LO_IP="127.0.0.1"
 
# define allowed ports
EXT_IN_TCP="22 80"
EXT_IN_UDP="33434:33524"
 
INT_IN_TCP="22 53 67 68 80 123 9999"
INT_IN_UDP="53 67 68 123 9999 33434:33524"
 
#######
# Lets go
#######
echo "Tunning ..."
if [ -x /sbin/sysctl ] ; then
    # stop forwarding
    $SYSCTL net.ipv4.ip_forward=0
    # fix our routing a bit
    $SYSCTL net.ipv4.conf.default.accept_redirects=0
    $SYSCTL net.ipv4.conf.default.accept_source_route=0
    $SYSCTL net.ipv4.conf.default.send_redirects=0
    $SYSCTL net.ipv4.conf.default.rp_filter=1
    # don't log strange packets
    $SYSCTL net.ipv4.conf.default.log_martians=0
    # smurf rpotection
    $SYSCTL net.ipv4.icmp_echo_ignore_broadcasts=1
    $SYSCTL net.ipv4.icmp_ignore_bogus_error_responses=1
    $SYSCTL net.ipv4.conf.default.proxy_arp=0
    # keep quiet about arp requests/answers
    $SYSCTL net.ipv4.conf.default.arp_filter=1
    $SYSCTL net.ipv4.conf.default.arp_announce=1
    $SYSCTL net.ipv4.conf.default.arp_ignore=1
    # set the ttl to a windows like box (additional layer of security)
    $SYSCTL net.ipv4.ip_default_ttl=128
    # recycle fast unused buckets for packet infos
    $SYSCTL net.ipv4.tcp_tw_recycle=1
    $SYSCTL net.ipv4.tcp_tw_reuse=1
    # do not stamp the packets
    $SYSCTL net.ipv4.tcp_timestamps=0
else
    echo "0" > /proc/sys/net/ipv4/ip_forward
    echo "0" > /proc/sys/net/ipv4/conf/default/accept_redirects
    echo "0" > /proc/sys/net/ipv4/conf/default/accept_source_route
    echo "0" > /proc/sys/net/ipv4/conf/default/send_redirects
    echo "1" > /proc/sys/net/ipv4/conf/default/rp_filter
    echo "0" > /proc/sys/net/ipv4/conf/default/log_martians
    echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
    echo "1" > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
    echo "0" > /proc/sys/net/ipv4/conf/default/proxy_arp
    echo "1" > /proc/sys/net/ipv4/conf/default/arp_filter
    echo "2" > /proc/sys/net/ipv4/conf/default/arp_announce
    echo "2" > /proc/sys/net/ipv4/conf/default/arp_ignore
    echo "128" > /proc/sys/net/ipv4/ip_default_ttl
    echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle
    echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse
    echo "0" > /proc/sys/net/ipv4/tcp_timestamps
fi
 
# Clear all tables
echo "Start on clean ..."
$IPT -F
$IPT -t nat -F
$IPT -t mangle -F
 
$IPT -X
$IPT -t nat -X
$IPT -t mangle -X
 
$IPT -P INPUT DROP
$IPT -P OUTPUT DROP
$IPT -P FORWARD DROP
	 
echo "Setting custom chains ..."
$IPT -N bad_packets
$IPT -N bad_tcp_packets
$IPT -N icmp_packets
$IPT -N tcp_in
$IPT -N udp_in
$IPT -N tcp_out
$IPT -N udp_out
 
echo "Setting some protections ..."
echo "  General"
$IPT -A bad_packets -p ALL -i $EXT_IF -s $INT_NET -j DROP
$IPT -A bad_packets -p ALL -m state --state INVALID -j DROP
$IPT -A bad_packets -p tcp -j bad_tcp_packets
$IPT -A bad_packets -p ALL -j RETURN
 
echo "  TCP"
$IPT -A bad_tcp_packets -p tcp ! --syn -m state --state NEW -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags ALL NONE -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags ALL ALL -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
$IPT -A bad_tcp_packets -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
$IPT -A tcp_in -p tcp -s 0/0 --dport 113 -j REJECT
$IPT -A bad_tcp_packets -p tcp -j RETURN
 
echo "  ICMP"
$IPT -A icmp_packets --fragment -p icmp -j DROP
$IPT -A icmp_packets -p icmp -s 0/0 --icmp-type 8 -m limit --limit 1/s -j ACCEPT
$IPT -A icmp_packets -p icmp -s 0/0 --icmp-type 11 -j ACCEPT
$IPT -A icmp_packets -p icmp -j RETURN
 
echo "  UDP"
$IPT -A udp_in -p udp -s 0/0 --dport 137 -j DROP
$IPT -A udp_in -p udp -s 0/0 --dport 139 -j DROP
$IPT -A udp_in -p udp -s 0/0 --dport 113 -j REJECT
 
echo "Filling the chains ..."
echo "  UDP INCOMING"
for PORT in $EXT_IN_UDP ; do
    $IPT -A udp_in -p udp -i EXT_IF -s 0/0 --dport $PORT -j ACCEPT;
done
for PORT in $INT_IN_UDP ; do
    $IPT -A udp_in -p udp -i INT_IF -s 0/0 --dport $PORT -j ACCEPT;
done
$IPT -A udp_in -j RETURN
 
echo "  UDP OUTGOING"
$IPT -A udp_out -p udp -s 0/0 -j ACCEPT
 
echo "  TCP INCOMING"
for PORT in $EXT_IN_TCP ; do
    $IPT -A tcp_in -p tcp -i $EXT_IF -s 0/0 --dport $PORT -j ACCEPT
done
for PORT in $INT_IN_TCP ; do
    $IPT -A tcp_in -p tcp -i $INT_IF -s 0/0 --dport $PORT -j ACCEPT
done
$IPT -A tcp_in -p tcp -j RETURN
 
echo "  TCP OUTGOING"
$IPT -A tcp_out -p tcp -j ACCEPT
 
echo "  INCOMING"
$IPT -A INPUT -p ALL -i $LO_IF -j ACCEPT
$IPT -A INPUT -p ALL -j bad_packets
$IPT -A INPUT -p ALL -d 224.0.0.1 -j DROP
$IPT -A INPUT -p ALL -i $INT_IF -s $INT_NET -j ACCEPT
$IPT -A INPUT -p ALL -i $INT_IF -d $INT_BC -j ACCEPT
$IPT -A INPUT -p UDP -i $INT_IF --sport 68 --dport 67 -j ACCEPT
$IPT -A INPUT -p ALL -i $EXT_IF -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPT -A INPUT -p ALL -i !$EXT_IF -m state --state NEW -j ACCEPT
$IPT -A INPUT -p TCP -i $EXT_IF -j tcp_in
$IPT -A INPUT -p UDP -i $EXT_IF -j udp_in
$IPT -A INPUT -p ICMP -i $EXT_IF -j icmp_packets
$IPT -A INPUT -m pkttype --pkt-type broadcast -j DROP
 
echo "  FORWARD"
$IPT -A FORWARD -p ALL -j bad_packets
$IPT -A FORWARD -p tcp -i $INT_IF -j tcp_out
$IPT -A FORWARD -p udp -i $INT_IF -j udp_out
$IPT -A FORWARD -p ALL -i $INT_IF -j ACCEPT
$IPT -A FORWARD -i $EXT_IF -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPT -A FORWARD -p ALL -i $EXT_IF -m state --state NEW -j ACCEPT
 
echo "  OUTPUT"
$IPT -A OUTPUT -m state -p icmp --state INVALID -j DROP
$IPT -A OUTPUT -p ALL -s $LO_IP -j ACCEPT
$IPT -A OUTPUT -p ALL -o $LO_IF -j ACCEPT
$IPT -A OUTPUT -p ALL -s $INT_IP -j ACCEPT
$IPT -A OUTPUT -p ALL -o $INT_IF -j ACCEPT
$IPT -A OUTPUT -p ALL -o $EXT_IF -j ACCEPT
 
echo "  NAT"
echo "      PORT FORWARDING"
TMP="`echo $INT_IP | cut -d\. -f1-3`"
for HOST in `seq 2 254` ; do
        PORTR=$((10000+HOST*10)):$((10009+HOST*10))
        echo "   $PORTR for $TMP.$HOST"
        $IPT -A FORWARD -p udp -i $EXT_IF --dport $PORTR -d $TMP.$HOST -j ACCEPT
        $IPT -A FORWARD -p tcp -i $EXT_IF --dport $PORTR -d $TMP.$HOST -j ACCEPT
        $IPT -t nat -A PREROUTING -p udp -i $EXT_IF --dport $PORTR -j DNAT --to $TMP.$HOST
        $IPT -t nat -A PREROUTING -p tcp -i $EXT_IF --dport $PORTR -j DNAT --to $TMP.$HOST
done
 
$IPT -t nat -A POSTROUTING -o $EXT_IF -j SNAT --to $EXT_IP

#Forwarding HTTP ports to Squid
#$IPT -t nat -A PREROUTING -i $INT_IF -m multiport -p tcp --dports 21,80,81,88,8800,8080 -j REDIRECT --to-port 9999

#Drop portmap for EXT_IF
$IPT -A INPUT -p tcp --dport 111 -i eth1 -j DROP
 
if [ -x /sbin/sysctl ] ; then
    $SYSCTL net.ipv4.ip_forward=1
else
    echo "1" > /proc/sys/net/ipv4/ip_forward
fi
